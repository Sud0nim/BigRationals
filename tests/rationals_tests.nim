import bigrationals, bigints

var
  z = BigRational(num: initBigInt(0), den: initBigInt(1))
  o = initBigRational(initBigInt(1), initBigInt(1))
  a = initBigRational(initBigInt(1), initBigInt(2))
  b = initBigInt(-1) // initBigInt(-2)
  m1 = initBigInt(-1) // initBigInt(1)
  tt = initBigInt(10) // initBigInt(2)
  zz = 3 // "2873787823782378191878937683787893898802090290092"
  yy = "289898713137837897823878238278478287478924" // 2873

assert( zz < yy)
assert( yy > zz)
assert( yy > o)
assert (zz < o)
assert( a     == a )
assert( (a - a) == z )
assert( (a + b) == o )
assert( (a / b) == o )
assert( (a * b) == initBigInt(1) // initBigInt(4) )
assert( (initBigInt(3) / a) == initBigInt(6) // initBigInt(1) )
assert( (a / initBigInt(3)) == initBigInt(1) // initBigInt(6) )
assert( a * b   == initBigInt(1) // initBigInt(4) )
assert( tt * z  == z )
assert( initBigInt(10) * a  == tt )
assert( a * initBigInt(10)  == tt )
assert( tt/initBigInt(10) == a  )
assert( a - m1  == initBigInt(3) // initBigInt(2) )
assert( a + m1  == initBigInt(-1) // initBigInt(2) )
assert( m1 + tt == initBigInt(16) // initBigInt(4) )
assert( m1 - tt == initBigInt(6) // initBigInt(-1) )
assert( z < o )
assert( z <= o )
assert( z == z )
assert( cmp(z, o) < 0 )
assert( cmp(o, z) > 0 )
assert( o == o )
assert( o >= o )
assert( not(o > o) )
assert( cmp(o, o) == 0 )
assert( cmp(z, z) == 0 )
assert( hash(o) == hash(o) )
assert( a == b )
assert( a >= b )
assert( not(b > a) )
assert( cmp(a, b) == 0 )
assert( hash(a) == hash(b) )

var x = initBigInt(1) // initBigInt(3)

x *= initBigInt(5) // initBigInt(1)
assert( x == initBigInt(5) // initBigInt(3) )
x += initBigInt(2) // initBigInt(9)
assert( x == initBigInt(17) // initBigInt(9) )
x -= initBigInt(9) // initBigInt(18)
assert( x == initBigInt(25) // initBigInt(18) )
x /= initBigInt(1) // initBigInt(2)
assert( x == initBigInt(50) // initBigInt(18) )

var y = initBigInt(1) // initBigInt(3)

y *= initBigInt(4)
assert( y == initBigInt(4) // initBigInt(3) )
y += initBigInt(5)
assert( y == initBigInt(19) // initBigInt(3) )
y -= initBigInt(2)
assert( y == initBigInt(13) // initBigInt(3) )
y /= initBigInt(9)
assert( y == initBigInt(13) // initBigInt(27) )
assert toBigRational(initBigInt(5)) == initBigInt(5) // initBigInt(1)
assert toBigInt(z) == initBigInt(0)
